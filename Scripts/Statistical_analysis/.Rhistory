Plots+geom_point(alpha=AL)
pdf("~/Desktop/Recherche/En_cours/Analyses_en_cours/Sanders_etal/Outputs/BDTT_Caption_Mammalia_Aves_Chiroptera.pdf",width = 7,height = 4)
Plots+geom_point(alpha=AL)
dev.off()
Ree=Results[(Results$metric=="Jaccard")&(Results$method==M)&(!Results$model=="global")&(as.character(Results$data)%in%c("Primates","Aves","Chiroptera")),]
levels(Ree$model)=c("Phylogeny + Diet","Phylogeny","Diet")
Plots=ggplot(data=Ree,aes(y=R2,x=slice,colour=model,group=interaction(Individual,model),shape=factor(R2_Pval<.05,labels = c("no","yes"))))+facet_wrap(~data,ncol = 3)
Plots=Plots+geom_line(alpha=AL)+scale_shape_manual(values=c(1, 16 ))+xlab("Microbial phylo. scale (subst/sites)")
Plots=Plots+MyTheme+labs(shape="Significance", colour="Host Factors")
Plots=Plots+geom_smooth(se=F,aes(group=model),data=Ree)+ylab("% of microbiome beta-diversity\n variability explained (r2)")+scale_colour_manual(values=cols)
Plots+geom_point(alpha=AL)
pdf("~/Desktop/Recherche/En_cours/Analyses_en_cours/Sanders_etal/Outputs/BDTT_Caption_Primates_Aves_Chiroptera.pdf",width = 7,height = 4)
Plots+geom_point(alpha=AL)
dev.off()
AL=.15
M="Spearman"
Ree=Results[(Results$metric=="Jaccard")&(Results$method==M)&(!Results$model=="global")&(as.character(Results$data)%in%c("Mammalia","Aves","Chiroptera")),]
levels(Ree$model)=c("Phylogeny + Diet","Phylogeny","Diet")
Plots=ggplot(data=Ree,aes(y=R2,x=slice,colour=model,group=interaction(Individual,model),shape=factor(R2_Pval<.05,labels = c("no","yes"))))+facet_wrap(~data,ncol = 3)
Plots=Plots+geom_line(alpha=AL)+scale_shape_manual(values=c(1, 16 ))+xlab("Microbial phylo. scale (subst/sites)")
Plots=Plots+MyTheme+labs(shape="Significance", colour="Host Factors")
Plots=Plots+geom_smooth(se=F,aes(group=model),data=Ree)+ylab("% of microbiome beta-diversity\n variability explained (r2)")+scale_colour_manual(values=cols)
Plots+geom_point(alpha=AL)
pdf("~/Desktop/Recherche/En_cours/Analyses_en_cours/Sanders_etal/Outputs/BDTT_Caption_Mammalia_Aves_Chiroptera.pdf",width = 7,height = 4)
Plots+geom_point(alpha=AL)
dev.off()
Ree=Results[(Results$metric=="Jaccard")&(Results$method==M)&(!Results$model=="global")&(as.character(Results$data)%in%c("Primates","Aves","Chiroptera")),]
levels(Ree$model)=c("Phylogeny + Diet","Phylogeny","Diet")
Plots=ggplot(data=Ree,aes(y=R2,x=slice,colour=model,group=interaction(Individual,model),shape=factor(R2_Pval<.05,labels = c("no","yes"))))+facet_wrap(~data,ncol = 3)
Plots=Plots+geom_line(alpha=AL)+scale_shape_manual(values=c(1, 16 ))+xlab("Microbial phylo. scale (subst/sites)")
Plots=Plots+MyTheme+labs(shape="Significance", colour="Host Factors")
Plots=Plots+geom_smooth(se=F,aes(group=model),data=Ree)+ylab("% of microbiome beta-diversity\n variability explained (r2)")+scale_colour_manual(values=cols)
Plots+geom_point(alpha=AL)
pdf("~/Desktop/Recherche/En_cours/Analyses_en_cours/Sanders_etal/Outputs/BDTT_Caption_Primates_Aves_Chiroptera.pdf",width = 7,height = 4)
Plots+geom_point(alpha=AL)
dev.off()
install.packages(" RVAideMemoire")
install.packages("RVAideMemoire")
library(RVAideMemoire)
?pairwise.perm.manova
pairwise.perm.manova
####### -----------------------------------------#######
#######  Effect of substrate and tidal height    #######
####### -----------------------------------------#######
rm(list=ls())
# 1. Loading data and functions
# -----------------------------
#Loading R packages and some functions
library(vegan)
library(dplyr)
library(ggplot2)
library(ape)
source("~/Documents/GitHub/Sea_weed_Microbiome/Scripts/Useful_functions.R")
#Define my ggplot theme
MyTheme=theme_bw()+theme(axis.text=element_text(size=9),axis.text.x =element_text(size=9),axis.title=element_text(size=14),legend.text=element_text(size=11),axis.ticks = element_line(size = 1.5))
#Loading Metadata
Metadata=read.table("~/Desktop/Recherche/En_cours/Analyses_en_cours/WestBeach/Data/V3/Metadata/Westbeach_Metadata_16s.txt",header=T,row.names = "SampleID");Metadata$SampleID=rownames(Metadata)
#Loading Beta-diversity matrices
Bacterial_BDTT=readRDS(file="~/Desktop/Recherche/En_cours/Analyses_en_cours/WestBeach/Data/V3/Beta_diversity/BDTT_Rarefs1000_16S.RDS")
Euk_BDTT=readRDS(file="~/Desktop/Recherche/En_cours/Analyses_en_cours/WestBeach/Data/V3/Beta_diversity/BDTT_Rarefs1000_18S.RDS")
#Selectiong samples that are shared between 16S and 18S data only
shared_sample=intersect(rownames(Metadata),intersect(dimnames(Bacterial_BDTT)[[3]],dimnames(Euk_BDTT)[[3]]))
Metadata=Metadata[shared_sample,]
# 2.1 Statistical tests: raw OTUS
# ------------------------------
#Selecting the tips of the ASV phylogenies (i.e. the ASV themselves) as microbial units and bray-curtis ('bc') as a beta-diversity metric
Bray_Bacterial=Bacterial_BDTT['0','bc',shared_sample,shared_sample]
Bray_Euk=Euk_BDTT['0','bc',shared_sample,shared_sample]
Permanova_16S=adonis2(Bray_Bacterial~Tidal_height+Substrate,data=Metadata,by="margin")
Pairwise_Permanova_16S=pairwise.perm.manova(Bray_Bacterial,Metadata$Substrate)
Metadata$Substrate
betadisper_16S_substrate=anova(betadisper(as.dist(Bray_Euk),fact=Metadata$Substrate)) # higly significant
Pairwise_Permanova_16S=pairwise.perm.manova(resp=Bray_Bacterial,fact=Metadata$Substrate)
Bray_Bacterial
dim(Bray_Bacterial)
Pairwise_Permanova_16S=pairwise.perm.manova(resp=Bray_Bacterial,fact=Metadata$Substrate)
Pairwise_Permanova_16S
pairwise.perm.manova
resp=Bray_Bacterial
fact=Metadata$Substrate
dname <- paste0(deparse(call$resp), " by ", deparse(substitute(fact)),
"\n", nperm, " permutations")
call <- match.call()
dname <- paste0(deparse(call$resp), " by ", deparse(substitute(fact)),
"\n", nperm, " permutations")
nperm = 999
dname <- paste0(deparse(call$resp), " by ", deparse(substitute(fact)),
"\n", nperm, " permutations")
fact <- factor(fact)
dname
Pairwise_Permanova_16S=pairwise.perm.manova(resp=as.dist(Bray_Bacterial),fact=Metadata$Substrate)
Pairwise_Permanova_16S
Pairwise_Permanova_16S$method
Pairwise_Permanova_16S$data.name
Pairwise_Permanova_16S$p.adjust.method
?adonis
data(dune)
data(dune.env)
## default test by terms
adonis2(dune ~ Management*A1, data = dune.env)
fun.p <- function(i, j) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"Pr(>F)"]
}
fun.p1 <- function(i, j) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F"]
}
multcomp <- pairwise.table(fun.p, levels(fact), p.adjust.method = p.method)
Fv=fun.p(levels(fact))
levels(fact)
?pairwise.table
pairwise.table
levels(fact)
cmbn(levels(fact))
expand.grid(levels(fact))
expand.grid(levels(fact),levels(fact))
?combinaiton
combn
combn(levels(fact))
combn(m=2,levels(fact))
t(combn(m=2,levels(fact)))
Pairs=data_framet(combn(m=2,levels(fact)))
Pairs=data_frame(t(combn(m=2,levels(fact))))
Pairs=data.frame(t(combn(m=2,levels(fact))))
Pairs
Pairs=data.frame(t(combn(m=2,levels(fact))));Pairs$P_value=NA;;Pairs$F_value=NA
?pairwise.table
dim(Pairs)
for (i in 1:dim(Pairs)[1])
{}
i
fun.p(Pairs$X1[i],Pairs$X2[i])
Pairs$X1[i]
Pairs$X2[i]
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fun.p <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"Pr(>F)"]
}
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
i
j
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
i=Pairs$X1[i]
j=Pairs$X2[i]
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
fact2
fact[as.numeric(fact) %in% c(i,
j)]
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
resp2
dim9  resp2
dim(  resp2 )
dim(resp2)
class(resp2)
dim(resp2[rows, rows])
rows
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"Pr(>F)"]
fact2
i
j
as.numeric(fact)
c(i,
j)
i
j
Pairs$X1[i]
t(combn(m=2,levels(fact)))
Pairs=data.frame((combn(m=2,levels(fact))))
Pairs
t(Pairs)
Pairs=data.frame(t(data.frame(combn(m=2,levels(fact)))))
Pairs
Pairs$X1[i]
data.frame(combn(m=2,levels(fact)))
Pairs=data.frame(combn(m=2,levels(fact)))
Pairs
Pairs$X1
Pairs$X1[1]
Pairs=data.frame(t(combn(m=2,levels(fact))))
Pairs
levels(Pairs)
levels(Pairs$X1)
levels(fact)
fact <- factor(fact)
Pairs=data.frame(t(combn(m=2,levels(fact))))
levels(Pairs$X1)=levels(Pairs$X2)=levels(fact)
Pairs$P_value=NA
Pairs$F_value=NA
i
j
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fun.p1(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fun.p1 <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F"]
}
fun.p1(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F"]
Pairs$X1[i]
Pairs$X1[2]
fun.p1(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fun.p1 <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F"]
}
fun.p1(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fact
resp
dim(resp)
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
fact2
fact
i
j
Pairs=data.frame(t(combn(m=2,levels(fact))))
levels(Pairs$X1)=levels(Pairs$X2)=levels(fact)
fun.p1(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
i=Pairs$X1[i]
j=Pairs$X2[i]
i
j
Pairs
?combn
fact <- factor(fact)
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs
Pairs$P_value=NA
Pairs$F_value=NA
fun.p1(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
Pairs
(Pairs$X1[i]
)
fact <- factor(fact)
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs$P_value=NA
Pairs$F_value=NA
levels(Pairs$X1)=levels(Pairs$X2)=levels(fact)
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
i
i=1
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
Pairs$X1[i]
Pairs$X2[i]
fun.p(Pairs$X1[i],Pairs$X2[i],fact=fact,resp=resp)
fact
dim(resp)
fun.p(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
k=1
fun.p(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
i=Pairs$X1[k]
i
j=Pairs$X2[k]
j
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
fact2
c(i,
j)
i
j
Pairs
fact <- factor(fact)
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs$P_value=NA
Pairs$F_value=NA
levels(Pairs$X1)=levels(Pairs$X2)=levels(fact)
Pairs
fact
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs
levels(Pairs$X1)
levels(fact)
levels(Pairs$X1)=levels(Pairs$X2)=levels(fact)
Pairs
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs$P_value=NA
Pairs$F_value=NA
levels(Pairs$X1)=levels(fact)
Pairs
levels(Pairs$X2)=levels(fact)
Pairs
levels(fact)
fact <- factor(fact)
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs$P_value=NA
Pairs$F_value=NA
levels(Pairs$X2)
levels(fact)
Pairs=t(combn(levels(fact),m=2))
Pairs
factor(Pairs,levels = levels(fact))
combn(levels(fact),m=2)
y=combn(levels(fact),m=2)
y
y[1,1]
fact <- factor(fact)
Pairs=t(combn(levels(fact),m=2))
Pairs$P_value=NA
Pairs$F_value=NA
Pairs$X1=factor(Pairs$X1,levels=levels(fact))
Pairs$X2=factor(Pairs$X2,levels=levels(fact))
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs$P_value=NA
Pairs$F_value=NA
Pairs$X1=factor(Pairs$X1,levels=levels(fact))
Pairs$X2=factor(Pairs$X2,levels=levels(fact))
Pairs
Pairs$X1[1]
k=1
fun.p(i=Pairs$X1[k],j=Pairs$X2[k],fact=fact,resp=resp)
fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
i=Pairs$X1[k]
i
j=Pairs$X2[k]
j
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
resp2
fact2
adonis(resp2 ~ fact2, permutations = nperm)
fun.p <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"Pr(>F)"]
}
fun.p1 <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F.model"]
}
fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F.model"]
a=vegan::adonis(resp2 ~ fact2, permutations = nperm)
a
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F.Model"]
fact <- factor(fact)
Pairs=data.frame(t(combn(levels(fact),m=2)))
Pairs$P_value=NA
Pairs$F_value=NA
Pairs$X1=factor(Pairs$X1,levels=levels(fact))
Pairs$X2=factor(Pairs$X2,levels=levels(fact))
for (k in 1:dim(Pairs)[1])
{
Pairs$P_value[k]=fun.p(i=Pairs$X1[k],j=Pairs$X2[k],fact=fact,resp=resp)
Pairs$F_value[k]=fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
}
Pairs$P_value
ak
k
fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
fun.p <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"Pr(>F)"]
}
fun.p1 <- function(i, j,fact,resp) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"F.Model"]
}
Pairs$F_value[k]=fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
k
for (k in 1:dim(Pairs)[1])
{
Pairs$P_value[k]=fun.p(i=Pairs$X1[k],j=Pairs$X2[k],fact=fact,resp=resp)
Pairs$F_value[k]=fun.p1(Pairs$X1[k],Pairs$X2[k],fact=fact,resp=resp)
}
Pairs
p.adjust(Pairs$P_value, method = p.adjust.methods, n = length(Pairs$P_value))
?p.adjust
p.adjust.methods
p.adjust(Pairs$P_value, method = "fdr", n = length(Pairs$P_value),)
(Pairs$P_value
)
p.adjust(Pairs$P_value, method = "fdr", n = length(Pairs$P_value),)
p.adjust(Pairs$P_value, method = "fdr", n = length(Pairs$P_value))
My_Pairwise_Permanova_16S=pairwise.perm.manova(resp=as.dist(Bray_Bacterial),fact=Metadata$Substrate)
My_Pairwise_Permanova_18S=pairwise.perm.manova(resp=as.dist(Bray_Euk),fact=Metadata$Substrate)
My_Pairwise_Permanova_18S
Pairwise_Permanova_16S=My_pairwise.perm.manova(resp=as.dist(Bray_Bacterial),fact=Metadata$Substrate)
source("~/Documents/GitHub/Sea_weed_Microbiome/Scripts/Useful_functions.R")
Pairwise_Permanova_18S=My_pairwise.perm.manova(resp=as.dist(Bray_Euk),fact=Metadata$Substrate)
Pairwise_Permanova_16S=My_pairwise.perm.manova(resp=as.dist(Bray_Bacterial),fact=Metadata$Substrate)
Pairwise_Permanova_16S
Pairwise_Permanova_18S
Permanova_16S=adonis2(Bray_Bacterial~Tidal_height+Substrate,data=Metadata,by="margin")
Permanova_18S=adonis2(Bray_Euk~Tidal_height+Substrate,data=Metadata,by="margin")
Permanova_16S
Permanova_18S
adonis2(Bray_Bacterial~Substrate,data=Metadata,by="margin")
format_aov_table(Permanova_16S,"16S_allSamples")
write.csv(Pairwise_Permanova_16S,"Documents/GitHub/Sea_weed_Microbiome/Outputs/Tables/Pairwise_Substrate_TidalHeight_PerMANOVAs_16S.csv")
getwd()
write.csv(Pairwise_Permanova_16S,"/Users/fmazel/Documents/GitHub/Sea_weed_Microbiome/Outputs/Tables/Pairwise_Substrate_TidalHeight_PerMANOVAs_16S.csv")
write.csv(Pairwise_Permanova_18S,"/Users/fmazel/Documents/GitHub/Sea_weed_Microbiome/Outputs/Tables/Pairwise_Substrate_TidalHeight_PerMANOVAs_18S.csv")
library(vegan)
?adonis2
rm(list=ls())
#Loading R packages and some functions
library(vegan)
library(dplyr)
library(ggplot2)
library(ape)
source("~/Documents/GitHub/Sea_weed_Microbiome/Scripts/Useful_functions.R")
#Define my ggplot theme
MyTheme=theme_bw()+theme(axis.text=element_text(size=9),axis.text.x =element_text(size=9),axis.title=element_text(size=14),legend.text=element_text(size=11),axis.ticks = element_line(size = 1.5))
#Loading Metadata
Metadata=read.table("~/Desktop/Recherche/En_cours/Analyses_en_cours/WestBeach/Data/V3/Metadata/Westbeach_Metadata_16s.txt",header=T,row.names = "SampleID");Metadata$SampleID=rownames(Metadata)
#Loading Beta-diversity matrices
Bacterial_BDTT=readRDS(file="~/Desktop/Recherche/En_cours/Analyses_en_cours/WestBeach/Data/V3/Beta_diversity/BDTT_Rarefs1000_16S.RDS")
Euk_BDTT=readRDS(file="~/Desktop/Recherche/En_cours/Analyses_en_cours/WestBeach/Data/V3/Beta_diversity/BDTT_Rarefs1000_18S.RDS")
#Selectiong samples that are shared between 16S and 18S data only
shared_sample=intersect(rownames(Metadata),intersect(dimnames(Bacterial_BDTT)[[3]],dimnames(Euk_BDTT)[[3]]))
Metadata=Metadata[shared_sample,]
#Selecting the tips of the ASV phylogenies (i.e. the ASV themselves) as microbial units and bray-curtis ('bc') as a beta-diversity metric
Bray_Bacterial=Bacterial_BDTT['0','bc',shared_sample,shared_sample]
Bray_Euk=Euk_BDTT['0','bc',shared_sample,shared_sample]
# 16S -- all samples
Permanova_16S=adonis2(Bray_Bacterial~Tidal_height+Substrate,data=Metadata,by="margin")
# 18S -- all samples
Permanova_18S=adonis2(Bray_Euk~Tidal_height+Substrate,data=Metadata,by="margin")
# Create a balanced design to test to remove bias from dispersion effect in adonis2
table(Metadata$Substrate) # 25 samples for water
Metadata_Balanced=Metadata %>% group_by(Substrate) %>% sample_n(size = 25) %>% data.frame()
Bal_sample=Metadata_Balanced$SampleID
Permanova_16S
Permanova_16S_bal=adonis2(Bray_Bacterial[Bal_sample,Bal_sample]~Tidal_height+Substrate,data=Metadata_Balanced,by="margin")
Permanova_16S_bal
Permanova_16S_bal=adonis2(Bray_Bacterial[Bal_sample,Bal_sample]~Tidal_height+Substrate,data=Metadata_Balanced,by="margin")
Permanova_16S_bal$F
res=list()
for (i in 1:100)
{
Metadata_Balanced=Metadata %>% group_by(Substrate) %>% sample_n(size = 25) %>% data.frame()
Bal_sample=Metadata_Balanced$SampleID
Permanova_16S_bal=adonis2(Bray_Bacterial[Bal_sample,Bal_sample]~Tidal_height+Substrate,data=Metadata_Balanced,by="margin")
res[[i]]=Permanova_16S_bal$F
}
res1=do.call(rbind,res)
res1
hist(res1[,1])
hist(res1)
hist(res1[,2])
Permanova_16S
